/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Model.Logic.StorageLogic;
import Model.Object.Product;
import Model.Object.User;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Lucas
 */
public class frmEstoque extends javax.swing.JInternalFrame {
    private final User user;

    /**
     * Creates new form frmAdicionarEstoque
     * @param user
     */
    public frmEstoque(User user) {
        initComponents();
        this.user = user;
        txtStoreID.setText(user.getStoreId() + "");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtCodeBar = new javax.swing.JTextField();
        txtProductName = new javax.swing.JTextField();
        txtAmount = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        txtStoreID = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtProductDescription = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        txtBrand = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        txtProductID = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Controle de Estoque - Cadastrar");

        jLabel1.setText("Referência/Loja:");

        jLabel3.setText("Nome:");

        jLabel4.setText("Quantidade:");

        jLabel5.setText("Código de barra:");

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/add.png"))); // NOI18N
        btnAdd.setToolTipText("Adicionar Item");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/clear.png"))); // NOI18N
        btnClear.setToolTipText("Limpar");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        txtStoreID.setEditable(false);

        jLabel2.setText("Preço:");

        txtProductDescription.setEditable(false);
        txtProductDescription.setColumns(20);
        txtProductDescription.setRows(5);
        jScrollPane1.setViewportView(txtProductDescription);

        jLabel6.setText("Descrição:");

        jLabel7.setText("Marca:");

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/search.png"))); // NOI18N
        btnSearch.setToolTipText("Pesquisar Item");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel8.setText("ID do Produto:");

        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/save.png"))); // NOI18N
        btnUpdate.setToolTipText("Salvar Alteração");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/delete.png"))); // NOI18N
        btnDelete.setToolTipText("Deletar Item");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtStoreID, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(0, 25, Short.MAX_VALUE))
                                    .addComponent(txtProductID))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(txtCodeBar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)))
                            .addComponent(txtProductName)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(txtBrand))))
                        .addGap(25, 25, 25))))
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(btnSearch)
                .addGap(18, 18, 18)
                .addComponent(btnAdd)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate)
                .addGap(18, 18, 18)
                .addComponent(btnDelete)
                .addGap(18, 18, 18)
                .addComponent(btnClear)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtStoreID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtProductID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCodeBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAdd)
                    .addComponent(btnClear)
                    .addComponent(btnSearch)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtAmount.setText("");
        txtCodeBar.setText("");
        txtProductName.setText("");
        txtPrice.setText("");
        txtBrand.setText("");
        txtProductID.setText("");
        txtProductDescription.setText("");
        this.revalidate();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        StorageLogic logic = new StorageLogic();
        Product product = new Product();
        /*
        product.setName(txtProductName.getText());
        product.setDescription(txtProductDescription.getText());
        product.setPrice(Double.parseDouble(txtPrice.getText()));
        product.setBrand(txtBrand.getText());
        product.setBarcode(txtCodeBar.getText());*/
        try {
            if(txtProductID.getText().equals("")) {
                product = logic.searchByBarCode(txtCodeBar.getText());
            } else {
                product = logic.search(Integer.parseInt(txtProductID.getText()));
            }
            logic.addProduct(product, user.getStoreId(), Integer.parseInt(txtAmount.getText()));
            exibirMensagem("Produto adicionado ao estoque com sucesso.");
        } catch (Exception ex) {
            Logger.getLogger(frmEstoque.class.getName()).log(Level.SEVERE, null, ex);
            exibirMensagem("Erro: Falha ao adicionar produto ao estoque.\n" + ex.getMessage());
        }
        this.revalidate();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        StorageLogic logic = new StorageLogic();
        Product product;
        if(txtProductID.getText().equals("")) {
            try {
                product = logic.searchByBarCode(txtCodeBar.getText());
                txtAmount.setText(logic.searchItemAmount(user.getStoreId(), product) + "");
                txtProductID.setText(product.getProductId() + "");
                txtProductName.setText(product.getName());
                txtPrice.setText(product.getPrice() + "");
                txtBrand.setText(product.getBrand());
                txtProductDescription.setText(product.getDescription());
            } catch (Exception ex) {
                Logger.getLogger(frmEstoque.class.getName()).log(Level.SEVERE, null, ex);
                exibirMensagem("Erro: Produto não encontrado:\n" + ex.getMessage());
            }
        } else {
            try {
                product = logic.search(Integer.parseInt(txtProductID.getText()));
                txtAmount.setText(logic.searchItemAmount(user.getStoreId(), product) + "");
                txtCodeBar.setText(product.getBarcode());
                txtProductName.setText(product.getName());
                txtPrice.setText(product.getPrice() + "");
                txtBrand.setText(product.getBrand());
                txtProductDescription.setText(product.getDescription());
            } catch (Exception ex) {
                Logger.getLogger(frmEstoque.class.getName()).log(Level.SEVERE, null, ex);
                exibirMensagem("Erro: Produto não encontrado:\n" + ex.getMessage());
            }
        }
        this.revalidate();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        StorageLogic logic = new StorageLogic();
        Product product;
        if(txtProductID.getText().equals("")) {
            try {
                product = logic.searchByBarCode(txtCodeBar.getText());
                logic.update(product, user.getStoreId(), Integer.parseInt(txtAmount.getText()));
                exibirMensagem("Quantidade em estoque atualizada com sucesso.");
            } catch (Exception ex) {
                Logger.getLogger(frmEstoque.class.getName()).log(Level.SEVERE, null, ex);
                exibirMensagem("Erro: Não foi possível alterar a quantidade em estoque.\n" + ex.getMessage());
            }
        } else {
            try {
                product = logic.search(Integer.parseInt(txtProductID.getText()));
                logic.update(product, user.getStoreId(), Integer.parseInt(txtAmount.getText()));
                exibirMensagem("Quantidade em estoque atualizada com sucesso.");
            } catch (Exception ex) {
                Logger.getLogger(frmEstoque.class.getName()).log(Level.SEVERE, null, ex);
                exibirMensagem("Erro: Não foi possível alterar a quantidade em estoque.\n" + ex.getMessage());
            }
        }
        this.revalidate();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        StorageLogic logic = new StorageLogic();
        Product product;
        if(txtProductID.getText().equals("")) {
            try {
                product = logic.searchByBarCode(txtCodeBar.getText());
                logic.delete(product, user.getStoreId());
                exibirMensagem("Produto removido do estoque com sucesso.");
            } catch (Exception ex) {
                Logger.getLogger(frmEstoque.class.getName()).log(Level.SEVERE, null, ex);
                exibirMensagem("Erro: Não foi possível remover o produto do estoque.\n" + ex.getMessage());
            }
        } else {
            try {
                product = logic.search(Integer.parseInt(txtProductID.getText()));
                logic.delete(product, user.getStoreId());
                exibirMensagem("Produto removido do estoque com sucesso.");
            } catch (Exception ex) {
                Logger.getLogger(frmEstoque.class.getName()).log(Level.SEVERE, null, ex);
                exibirMensagem("Erro: Não foi possível remover o produto do estoque.\n" + ex.getMessage());
            }
        }
        this.revalidate();
    }//GEN-LAST:event_btnDeleteActionPerformed

    public void exibirMensagem(String str){
        JOptionPane.showMessageDialog(null, str);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtBrand;
    private javax.swing.JTextField txtCodeBar;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextArea txtProductDescription;
    private javax.swing.JTextField txtProductID;
    private javax.swing.JTextField txtProductName;
    private javax.swing.JTextField txtStoreID;
    // End of variables declaration//GEN-END:variables
}
